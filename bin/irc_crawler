#!/usr/bin/env ruby
require 'optparse'
require_relative '../lib/irc_crawler'
include IrcCrawler

options = {}

# Global options parsed by option parser
params = {}  # for parameters to pass on to run unit
option_parser = OptionParser.new do |opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
  
  opts.on('-d DUR', '--duration', 'Duration to run in minutes') do |duration|
    params[:duration] = duration.to_i
  end
  
  opts.on('-l LIM', '--limit', 'Maximum number of posts to download.') do |lim|
    params[:limit] = lim.to_i
  end
  
  opts.on('-s SERV', '--server', 'irc server to find channel on. Default = freenode') do |serv|
    params[:server] = serv
  end
  
  opts.on('-n NICK', '--nick', 'Nick to use. Default will be slightly random.') do |nick|
    params[:nick] = nick
  end

=begin
  NOT yet implemented. Probably not really needed
  opts.on('-p PORT', '--port', 'Server port for connections. Default = 6667') do |port|
    params[:port] = port
  end
=end
  opts.on('-c CHAN', '--channels', "Array of irc channels to listen to. REQUIRED.") do |chan|
    # split up array input
    params[:channels] = chan.split(/,/).collect{|i| i.strip }
  end
  
  opts.on('-f FMT', '--format', 'Output format. Valid values = csv|text-only|json|hash. Default: json') do |fmt|
    params[:format] = fmt
  end
  
  opts.on('-o OUT', '--output', "File to write output to.") do |out|
    params[:output] = out
  end
end

option_parser.parse!
if params.keys.empty?  # That means no incoming params
  puts "Usage irc_crawler <options>. Call irc_crawler --help for available options."
  exit
end

# Param checking will be handled in the module.
set_params(params)
run_crawler


